@page "/delete-product/{Id:int}"

@using EISG20240905.DTOs.ProductEISGDTOs;
@using Microsoft.AspNetCore.Components.Forms;
@using EISG20240905.AppWebBlazor.Data;

<h3>Eliminar Producto</h3>
<hr />
@if (isSuccess == false && isError == false)
{
	<div class="row">
		<div class="col-6">
			<div class="form-group">
				<label for="NombreEISG">Nombre</label>
				<input type="text" class="form-control" disabled @bind="productEISGDTO.NombreEISG" />
			</div>
		</div>
		<div class="col-6">
			<div class="form-group">
				<label for="Precio">Precio</label>
				<input type="number" class="form-control" disabled @bind="productEISGDTO.Precio" />
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12">
			<div class="form-group">
				<label for="DescripcionEISG">Descripción</label>
				<textarea disabled class="form-control" @bind="productEISGDTO.DescripcionEISG"></textarea>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="form-group col-md-6" style="margin-top:10px;">
			<button class="btn btn-danger" style="width:100%;" @onclick="async () => await Delete()">Eliminar</button>

		</div>
		<div class="form-group col-md-6" style="margin-top:10px;">
			<NavLink href="/product-list" style="width:100%;" class="btn btn-secondary">Cancelar</NavLink>
		</div>
	</div>
}
else if (isSuccess)
{
	<p style="color: #721c24; background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 8px; font-weight: bold; text-align: center; margin-bottom: 20px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);">
		Producto se eliminó con éxito.
	</p>
	<NavLink href="/product-list" style="background-color: #007bff; color: #fff; padding: 10px 20px; border-radius: 8px; font-size: 16px; text-transform: uppercase; text-decoration: none; transition: background-color 0.3s ease;">
		Aceptar
	</NavLink>
}
else if (isError)
{
	<p class="alert alert-error">Sucedio un error al intentar eliminar</p>
	<NavLink href="/product-list" class="btn btn-primary">Aceptar</NavLink>
}
@code {
	// Declaración de un parámetro llamado "Id" que puede ser pasado al componente
	[Parameter]
	public int Id { get; set; }

	// Inyección de dependencia de ProductEISGService para acceder a los servicios relacionados con los productos
	[Inject]
	ProductEISGService productEISGService { get; set; }

	// Declaración e inicialización de un objeto "customer" para almacenar la información del cliente
	GetIdResultProductEISGDTO productEISGDTO = new GetIdResultProductEISGDTO();

	// Declaración de variables booleanas para manejar el estado de éxito y error
	bool isSuccess = false;
	bool isError = false;

	// Método que se llama cuando se inicializa el componente
	protected override async Task OnInitializedAsync()
	{
		// Realiza una llamada asincrónica para obtener la información del cliente por su Id
		productEISGDTO = await productEISGService.GetById(Id);
	}

	// Método para eliminar el cliente
	private async Task Delete()
	{
		// Realiza una llamada asincrónica para eliminar el cliente por su Id
		int result = await productEISGService.Delete(productEISGDTO.Id);

		// Verifica si el resultado de la eliminación es diferente de cero (éxito) o igual a cero (error)
		if (result != 0)
			isSuccess = true;
		else
			isError = true;
	}

}
