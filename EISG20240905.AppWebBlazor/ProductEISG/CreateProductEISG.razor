@page "/create-product"
@using EISG20240905.DTOs.ProductEISGDTOs
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components;
@using EISG20240905.AppWebBlazor.Data;


@if (isSuccess == false && isError == false)
{

	<div class="row">
		<EditForm Model="productEISGDTO" OnValidSubmit="Create">
			<div class=" row">
				<h3 class="col-md-12">Crear Producto</h3>
				<hr />
			</div>
			<div class="row">
				<DataAnnotationsValidator />
				<div class="form-group col-md-6">
					<label for="NombreEISG">Nombre<span style="color:red;">*</span></label>
					<InputText class="form-control" id="NombreEISG" @bind-Value="productEISGDTO.NombreEISG" />
					<ValidationMessage For="() => productEISGDTO.NombreEISG" />
				</div>

				<div class="form-group col-md-6">
					<label for="Precio">Precio<span style="color:red;">*</span></label>
					<InputNumber class="form-control" id="Precio" @bind-Value="productEISGDTO.Precio" />
					<ValidationMessage For="() => productEISGDTO.Precio" />
				</div>
				<div class="form-group col-md-12">
					<label for="DescripcionEISG">Descripción</label>
					<InputTextArea class="form-control" id="DescripcionEISG" @bind-Value="productEISGDTO.DescripcionEISG" />
					<ValidationMessage For="() => productEISGDTO.DescripcionEISG" />
				</div>
				<div class="form-group col-md-6" style="margin-top:10px;">
					<button type="submit" style="width:100%;" class="btn btn-primary">Guardar</button>

				</div>
				<div class="form-group col-md-6" style="margin-top:10px;">
					<NavLink href="/product-list" style="width:100%;" class="btn btn-secondary">Cancelar</NavLink>

				</div>

			</div>
		</EditForm>
	</div>
}
else if (isSuccess)
{
	productEISGDTO = new CreateProductEISGDTO();
	isError = false;
	<p style="color: #155724; background-color: #d4edda; border: 1px solid #c3e6cb; padding: 15px; border-radius: 8px; font-weight: bold; text-align: center; margin-bottom: 20px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);">
		Producto creado con éxito.
	</p>
	<button type="button" @onclick="GoCreate" style="background-color: #007bff; border: none; color: #fff; padding: 10px 20px; border-radius: 8px; font-size: 16px; text-transform: uppercase; cursor: pointer; margin-right: 10px; transition: background-color 0.3s ease;">
		Registrar
	</button>
	<NavLink href="/product-list" style="background-color: #007bff; color: #fff; padding: 10px 20px; border-radius: 8px; font-size: 16px; text-transform: uppercase; text-decoration: none; transition: background-color 0.3s ease;">
		Volver a la lista
	</NavLink>
}
else if (isError)
{
	<p class="alert alert-success">sucedio un error al intentar registrar.</p>
	<NavLink href="/product-list" class="btn btn-primary">Aceptar</NavLink>
}

@code {
	// Inyección de dependencia de ProductEISGService para acceder a sus métodos
	[Inject]
	ProductEISGService productEISGService { get; set; }

	// Creación de una instancia de CreateProductEISGDTO para crear un producto
	CreateProductEISGDTO productEISGDTO = new CreateProductEISGDTO();
	bool isSuccess = false; // Variable para rastrear si la operación fue exitosa
	bool isError = false;  // Variable para rastrear si se produjo un error

	private async Task Create()
	{
		// Llama al método Create de ProductEISGService para crear un producto
		int result = await productEISGService.Create(productEISGDTO);
		if (result != 0) // Comprueba si el resultado de la operación es diferente de 0 (indicando éxito)
			isSuccess = true; // Establece isSuccess en true si la operación fue exitosa
		else
			isError = true; // Establece isError en true si la operación resultó en un error
	}

	private void GoCreate()
	{
		isSuccess = false; // Restablece isSuccess a false, utilizado para limpiar el estado de éxito
		isError = false;  // Restablece isError a false, utilizado para limpiar el estado de error
	}

}