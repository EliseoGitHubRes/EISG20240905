@page "/product-list"
@using EISG20240905.DTOs.ProductEISGDTOs;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using EISG20240905.AppWebBlazor.Data;

<h3>Buscar Producto</h3>
<EditForm Model="searchQuery" OnValidSubmit="SubmitSearch">
	<div class="row">
		<div class="col-3">
			<div class="form-group">
				<label for="NombreEISG">Nombre:</label>
				<InputText class="form-control" @bind-Value="searchQuery.NombreEISG_Like" />
			</div>
		</div>
		<div class="col-3">
			<div class="form-group">
				<label for="Precio">Precio:</label>
				<InputNumber class="form-control" @bind-Value="searchQuery.Precio_Like" />
			</div>
		</div>
		<div class="col-2">
			<div class="form-group">
				<label for="Take">Cantidad Reg.</label>
				<select class="form-control" @bind="searchQuery.Take">
					@for (var i = 10; i < 1000; i += 10)
					{
						<option value="@i">@i</option>
					}
				</select>
			</div>
		</div>
	</div>
	<br />
	<button type="submit" class="btn btn-primary">Buscar</button>
	<NavLink href="/create-product" class="btn btn-secondary">Registrar</NavLink>
	<br />
</EditForm>
<br />
<h3>Lista de Productos</h3>
<div class="row" style="overflow:auto !important;max-width:600px">
	<nav aria-label="Page navigation example">
		<ul class="pagination">
			<li class="page-item">
				<NavLink class="page-link" @onclick="async () => await PaginationSearch(skipAnte)">Anterior</NavLink>
			</li>
			@foreach (var item in paginations)
			{
				if (item.Skip != searchQuery.Skip)
				{
					<li class="page-item">
						<NavLink class="page-link" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
					</li>
				}
				else
				{
					<li class="page-item active">
						<NavLink class="page-link active" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</NavLink>
					</li>
				}
			}
			<NavLink class="page-link" @onclick="async () => await PaginationSearch(skipSi)">Siguiente</NavLink>
		</ul>

	</nav>
</div>
<div class="row">
	<div class="col-md-6">
		<span class="fw-bold">Total registros:  <span class="badge bg-primary">@searchResult.CountRow</span></span>
	</div>
</div>
@if (searchResult != null && searchResult.Data != null && searchResult.Data.Count > 0)
{
	<div class="row" style="margin-top:10px;">
		<div class="table-responsive col-md-12">
			<table class="table table-striped table-hover">
				<thead>
					<tr>
						<th>Nombre</th>
						<th>Descripción</th>
						<th>Precio</th>
						<th>Acciones</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var productEISGDTO in searchResult.Data)
					{
						<tr>
							<td>@productEISGDTO.NombreEISG</td>
							<td>@productEISGDTO.DescripcionEISG</td>
							<td>@productEISGDTO.Precio</td>
							<td>
								<table>
									<td>
										<button class="btn btn-dark" @onclick="() => GoEdit(productEISGDTO.Id)">Modificar</button>

									</td>
									<td>
										<button class="btn btn-info" @onclick="() => GoDetails(productEISGDTO.Id)">Detalle</button>

									</td>
									<td>
										<button class="btn btn-danger" @onclick="() => GoDelete(productEISGDTO.Id)">Eliminar</button>

									</td>
								</table>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}
@code {
	// Inyección de dependencias de ProductEISGService y NavigationManager
	[Inject]
	ProductEISGService productEISGService { get; set; }
	[Inject]
	NavigationManager navigation { get; set; }

	// Declaración e inicialización de objetos y variables
	SearchResultProductEISGDTO searchResult = new SearchResultProductEISGDTO();
	SearchQueryProductEISGDTO searchQuery = new SearchQueryProductEISGDTO { Take = 10 };
	List<Pagination> paginations = new List<Pagination>();
	int skipAnte = 0;
	int skipSi = 0;

	// Método para realizar una búsqueda
	private async Task Search()
	{
		searchResult = await productEISGService.Search(searchQuery);
	}

	// Método que se llama cuando se inicializa el componente
	/*
			*  se utiliza para realizar inicializaciones o tareas
			*  cuando se carga una página o componente de Blazor.
			* Este método se llama automáticamente cuando el componente se está inicializando
			*  antes de que se muestre en la interfaz de usuario.
			*/
	protected override async Task OnInitializedAsync()
	{
		// Configuración inicial de la búsqueda
		searchQuery.SendRowCount = 2;
		searchQuery.Skip = 0;

		// Realizar la búsqueda inicial
		await Search();

		// Actualizar la paginación
		UpdatePagination();
	}

	// Método para realizar una búsqueda después de una acción de búsqueda
	private async Task SubmitSearch()
	{
		// Configuración de la búsqueda
		searchQuery.SendRowCount = 2;
		searchQuery.Skip = 0;

		// Realizar la búsqueda
		await Search();

		// Actualizar la paginación
		UpdatePagination();
	}

	// Método para realizar una búsqueda paginada
	private async Task PaginationSearch(int skip)
	{
		// Almacenar temporalmente la cantidad de filas de resultados
		int countRowTemp = searchResult.CountRow;

		// Configuración de la búsqueda paginada
		searchQuery.SendRowCount = 1;
		searchQuery.Skip = skip;

		// Realizar la búsqueda paginada
		await Search();

		// Restaurar la cantidad de filas original
		searchResult.CountRow = countRowTemp;

		// Actualizar la paginación
		UpdatePagination();
	}

	// Métodos para navegar a las páginas de edición, detalles y eliminación
	private void GoEdit(int productEISGId)
	{
		navigation.NavigateTo($"/edit-product/{productEISGId}");
	}

	private void GoDetails(int productEISGId)
	{
		navigation.NavigateTo($"/product-details/{productEISGId}");
	}

	private void GoDelete(int productEISGId)
	{
		navigation.NavigateTo($"/delete-product/{productEISGId}");
	}

	// Método para actualizar la lista de paginación
	private void UpdatePagination()
	{
		// Inicializar la lista de paginación
		paginations = new List<Pagination>();

		// Calcular el número total de páginas
		int totalPages = (int)Math.Ceiling((double)searchResult.CountRow / searchQuery.Take);

		// Calcular el valor de skipAnte y skipSi
		skipAnte = searchQuery.Skip > 0 ? searchQuery.Skip - searchQuery.Take : 0;
		int skipMax = 0;

		// Generar objetos de paginación y agregarlos a la lista
		for (var i = 0; i < totalPages; i++)
		{
			var pagination = new Pagination()
				{
					Skip = i * searchQuery.Take,
					NumPage = i + 1
				};

			paginations.Add(pagination);
			skipMax = pagination.Skip;
		}

		// Calcular el valor de skipSi
		skipSi = searchQuery.Skip + searchQuery.Take;
		skipSi = skipSi > skipMax ? skipSi - searchQuery.Take : skipSi;
	}

	// Clase para representar la información de paginación
	class Pagination
	{
		public int NumPage { get; set; }
		public int Skip { get; set; }
	}

}